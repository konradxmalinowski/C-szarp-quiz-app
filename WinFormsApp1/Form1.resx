<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        RK5CYII=
</value>
  </data>
</root>